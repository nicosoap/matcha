{"version":3,"sources":["interactions.js"],"names":[],"mappings":"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","file":"interactions-compiled.js","sourcesContent":["/**\n * Created by opichou on 9/19/16.\n */\nimport express from 'express'\nimport fs from 'fs'\nimport parseurl from 'parseurl'\nimport bodyParser from 'body-parser'\nimport session from 'express-session'\nimport socketIo from 'socket.io'\nimport * as picture from './picture'\nimport chalk from 'chalk'\nimport * as dbl from './dbConnect'\nimport config from '../config.json'\n// var io = require('socket.io-emitter')({host:'localhost', port:3001})\n// setInterval(function(){\n//     io.emit('time', new Date)\n// }, 5000)\n\n// const io = socketIo(server)\n\n\n\nmodule.exports = (io) =>{\n\n\n    let self = {\n\n        now: () => {\n            const currentDate = new Date();\n            return currentDate.getDate() + \"/\" + (\"0\" + (currentDate.getMonth() + 1)).slice(-2)\n                + \"/\" + currentDate.getFullYear() + \" @ \"\n                + currentDate.getHours() + \":\"\n                + currentDate.getMinutes() + \":\" + currentDate.getSeconds()\n        },\n\n        sendNotif: async(login, type, payload) => {\n            const db = await dbl.connect()\n            try {\n                const ret = await db.collection('connections').findOne({login}, {socket: true})\n                const socket = ret.socket\n                io.sockets.connected[socket].emit(type, payload)\n            } finally {\n                db.close()\n            }\n        },\n\n        connect: async(login, socket) => {\n            const db = await dbl.connect()\n            try {\n                const currentDate = new Date()\n                await db.collection('connections').updateOne({login}, {\n                    $set: {\n                        socket,\n                        connected: true,\n                        date: currentDate\n                    }\n                }, {upsert: true})\n                if (config.debug) {\n                    self.sendNotif(login,\n                        config.debug_output,\n                        {\n                            body: \"Connected to Matcha Server on \" + self.now()})\n                    console.log(\"BEBUG: user connected and notified as \" + config.debug_output + \".\")\n                }\n            } finally {\n                db.close()\n            }\n        },\n\n        disconnect: async(login, socket) => {\n            const db = await dbl.connect()\n            try {\n                currentDate = new Date()\n                await db.collection('connections').updateOne({login}, {\n                    $set: {\n                        socket,\n                        connected: false,\n                        date: currentDate\n                    }\n                }, {upsert: true})\n            } finally {\n                db.close()\n            }\n        },\n\n        _his: (user) =>{\n            if (user.gender === 'male') { return'his'} else if (user.gender === 'female') { return 'her'} else { return 'their'}\n        },\n        _him: (user) =>{\n            if (user.gender === 'male') { return 'him'} else if (user.gender === 'female') { return 'her'} else {return 'them'}\n        },\n\n        photo: user => { if (user.photo.length > 0) {\n            return (user.photo[0])\n        }},\n\n\n\n        like: async(req, res) => {\n            console.log('like')\n            const userId = req.user.username,\n                otherId = req.params.userId\n            let db = await dbl.connect()\n            try {\n                await db.collection('likes').updateOne({userId, otherId}, {$set: {like: true}}, {upsert: true})\n                let user = await db.collection('users').findOne({login: userId})\n                let user2 = await db.collection('users').findOne({login: otherId})\n                let match = await self.doesLike(otherId, userId)\n                if (match) {\n                    res.send({success: true, match: true})\n                    const body = userId + ' and you matched ! You can now chat with ' + self._him(user) + '.'\n                    const body2 = otherId + ' and you matched ! You can now chat with ' + self._him(user2) + '.'\n\n                    self.sendNotif(otherId, 'match', {\n                        body,\n                        from: userId,\n                        image:self.photo(user),\n                        read: false\n                    })\n                    self.sendNotif(userId, 'match', {\n                        body2,\n                        from: otherId,\n                        image: self.photo(user2),\n                        read: false\n                    })\n                } else {\n                    res.send({success: true, match: false})\n                    if (config.debug) {\n                        self.sendNotif(userId, config.debug_output, {\n                            body: \"Like notification has been sent to \" + otherId + \".\",\n                            from: userId,\n                            image:self.photo(user),\n                            read: false\n                        })\n                    }\n                    const body = userId + ' is interested in you. Check out ' + self._his(db, userId) + ' profile!'\n                    self.sendNotif(otherId, 'like', {\n                        body,\n                        from: userId,\n                        image:self.photo(user),\n                        read: false\n                    })\n                }\n            } catch (err) {\n                console.log(err)\n            } finally {\n                db.close()\n            }\n        },\n\n        dislike: async(req, res) => {\n            const userId = req.user.username,\n                otherId = req.params.userId\n            console.log(userId, otherId)\n            let db = await dbl.connect()\n            try {\n                db.collection('likes').updateOne({userId, otherId}, {$set: {like: false}}, {upsert: true})\n                let user = await db.collection('users').findOne({login: userId})\n                res.send({success: true})\n                const body = userId + ' is not THAT into you after all. Deal with it!'\n                if (config.debug) {\n                    self.sendNotif(userId, config.debug_output, {\n                        body: \"dislike notification has been sent to \" + otherId + \".\",\n                        from: userId,\n                        image:self.photo(user),\n                        read: false\n                    })\n                }\n                self.sendNotif(otherId, 'like', {\n                    body,\n                    from: userId,\n                    image:self.photo(user),\n                    read: false\n                })\n            } catch (err) {\n                console.log(err)\n            } finally {\n                db.close()\n            }\n        },\n\n        block: async(req, res) => {\n            const userId = req.user.username,\n                otherId = req.params.userId\n            const db = await dbl.connect()\n            try {\n                await db.collection('blocks').upsert({userId, otherId}, {$set: {block: true}})\n                res.send({success: true})\n            } finally {\n                db.close()\n            }\n        },\n\n        doesLike: async(userId, otherId) => {\n            //this method checks if a log entry exists for userId liking otherId and fires callback\n            const db = await dbl.connect()\n            try {\n                return (db.collection('likes').find({userId, otherId, like: true}).count() === 1)\n            } finally {\n                db.close()\n            }\n        },\n\n        match: async(userId, otherId) => {\n            //this method checks, giver two user ids if mutual likes exist and fires callback\n            return (await self.doesLike(userId, otherId)\n            && await self.doesLike(otherId, userId))\n        }\n    }\n    return self\n}"]}