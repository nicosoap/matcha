{"version":3,"sources":["interactions.js"],"names":[],"mappings":"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","file":"interactions-compiled.js","sourcesContent":["/**\n * Created by opichou on 9/19/16.\n */\nimport express from 'express'\nimport fs from 'fs'\nimport parseurl from 'parseurl'\nimport bodyParser from 'body-parser'\nimport session from 'express-session'\nimport socketIo from 'socket.io'\nimport * as picture from './picture'\nimport * as dbl from './dbConnect'\nimport config from '../config.json'\n// var io = require('socket.io-emitter')({host:'localhost', port:3001})\n// setInterval(function(){\n//     io.emit('time', new Date)\n// }, 5000)\n\n// const io = socketIo(server)\n\n\n\nmodule.exports = (io) =>{\n\n\n    let self = {\n\n        now: () => {\n            const currentDate = new Date();\n            return currentDate.getDate() + \"/\" + (\"0\" + (currentDate.getMonth() + 1)).slice(-2)\n                + \"/\" + currentDate.getFullYear() + \" @ \"\n                + currentDate.getHours() + \":\"\n                + currentDate.getMinutes() + \":\" + currentDate.getSeconds()\n        },\n\n        sendNotif: async(login, type, payload) => {\n            const db = await dbl.connect()\n            try {\n                const ret = await db.collection('connections').findOne({login}, {socket: true})\n                const socket = ret.socket\n                io.sockets.connected[socket].emit(type, payload)\n            } finally {\n                db.close()\n            }\n        },\n\n        connect: async(login, socket) => {\n            const db = await dbl.connect()\n            try {\n                const currentDate = new Date()\n                await db.collection('connections').updateOne({login}, {\n                    $set: {\n                        socket,\n                        connected: true,\n                        date: currentDate\n                    }\n                }, {upsert: true})\n                if (config.debug) {\n                    self.sendNotif('opichou', 'like', {body: \"Connected to Matcha Server on \" + self.now()})\n                }\n            } finally {\n                db.close()\n            }\n        },\n\n        disconnect: async(login, socket) => {\n            const db = await dbl.connect()\n            try {\n                currentDate = new Date()\n                await db.collection('connections').updateOne({login}, {\n                    $set: {\n                        socket,\n                        connected: false,\n                        date: currentDate\n                    }\n                }, {upsert: true})\n            } finally {\n                db.close()\n            }\n        },\n\n        \n\n\n///\n        ///\n        ///\n        ///                     ATTENTION CETTE FONCTION ENVOIE UN MESSAGE A L'EMMETEUR ET DEVRAIT L'ENVOYER AU DESTINATAIRE\n        ///\n        ///\n\n        //this method logs a like from userId to otherId (being the other member's userId and fires callback\n        like: async(req, res) => {\n            const userId = req.user.username,\n                otherId = req.params.userId\n            let db = await dbl.connect()\n            let photo = await picture.getAll(userId)\n            let photo2 = await picture.getAll(otherId)\n            try {\n                await db.collection('likes').updateOne({userId, otherId}, {$set: {like: true}}, {upsert: true})\n                const user = await db.collection('users').findOne({login: userId})\n                const user2 = await db.collection('users').findOne({login: otherId})\n                if (await this.doeslike(otherId, userId)) {\n                    res.send({success: true, match: true})\n                    const body = userId + ' and you matched ! You can now chat with ' + self._him(user) + '.'\n                    const body2 = otherId + ' and you matched ! You can now chat with ' + self._him(user2) + '.'\n\n                    this.sendNotif(otherId, 'match', {\n                        body,\n                        from: userId,\n                        image: photo[0],\n                        read: false\n                    })\n                    this.sendNotif(userId, 'match', {\n                        body2,\n                        from: otherId,\n                        image: photo2[0],\n                        read: false\n                    })\n                } else {\n                    res.send({success: true, match: false})\n                    if (config.debug) {\n                        self.sendNotif('opichou', 'like', {\n                            body,\n                            from: userId,\n                            image: photo[0],\n                            read: false\n                        })\n                    }\n                    const body = userId + ' is interested in you. Check out ' + self._his(db, userId) + ' profile!'\n                    this.sendNotif(otherId, 'like', {\n                        body,\n                        from: userId,\n                        image: photo[0],\n                        read: false\n                    })\n                }\n            } catch (err) {\n                console.log(err)\n            } finally {\n                db.close()\n            }\n        },\n\n///\n        ///\n        ///\n        ///                     ATTENTION CETTE FONCTION ENVOIE UN MESSAGE A L'EMMETEUR ET DEVRAIT L'ENVOYER AU DESTINATAIRE\n        ///\n        ///\n        dislike: async(req, res) => {\n            const userId = req.user.username,\n                otherId = req.params.userId\n            console.log(userId, otherId)\n            let db = await dbl.connect()\n            try {\n                db.collection('likes').updateOne({userId, otherId}, {$set: {like: false}}, {upsert: true})\n                res.send({success: true})\n                const body = userId + ' is not THAT into you after all. Deal with it!'\n                this.sendNotif(userId, 'like', {\n                    body,\n                    from: userId,\n                    image: photo[0],\n                    read: false\n                })\n            } catch (err) {\n                console.log(err)\n            } finally {\n                db.close()\n            }\n        },\n\n        block: async(req, res) => {\n            const userId = req.user.username,\n                otherId = req.params.userId\n            //this method logs a like from userId to otherId (being the other member's userId and fires callback\n            const db = await dbl.connect()\n            try {\n                await db.collection('blocks').upsert({userId, otherId}, {$set: {block: true}})\n                res.send({success: true})\n            } finally {\n                db.close()\n            }\n        },\n\n        doesLike: async(userId, otherId) => {\n            //this method checks if a log entry exists for userId liking otherId and fires callback\n            const db = await dbl.connect()\n            try {\n                return (db.collection('likes').find({userId, otherId, like: true}).count() === 1)\n            } finally {\n                db.close()\n            }\n        },\n\n        match: async(userId, otherId) => {\n            //this method checks, giver two user ids if mutual likes exist and fires callback\n            return (await doesLike(userId, otherId)\n            && await doesLike(otherId, userId))\n        }\n    }\n    return self\n}"]}