{"version":3,"sources":["display.js"],"names":[],"mappings":"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","file":"display-compiled.js","sourcesContent":["\nimport fs from 'fs'\nimport session from 'express-session'\nimport bcrypt from 'bcrypt-nodejs'\nimport * as dbl from \"./dbConnect\"\nimport credentials from '../credentials'\nimport jwt from 'jsonwebtoken'\nimport nodemailer from 'nodemailer'\nimport ERROR from './errno_code'\nimport match from '../model/match'\nimport crypto from 'crypto'\nimport * as user from './user'\n\nlet saltRounds = 10\n\nlet transporter = nodemailer.createTransport('smtps://apimatcha@gmail.com:apiMatcha1212@smtp.gmail.com')\n\n\nfunction now(){\n    const currentDate = new Date();\n    return currentDate.getDate() + \"/\"+ (\"0\" + (currentDate.getMonth() + 1)).slice(-2)\n        + \"/\" + currentDate.getFullYear() + \" @ \"\n        + currentDate.getHours() + \":\"\n        + currentDate.getMinutes() + \":\" + currentDate.getSeconds()\n}\n\nconst encrypt = async message => {\n    let encrypted = await crypto.createHmac('sha256', credentials.cookieSecret)\n        .update(message, 'utf8', 'hex')\n        .digest('hex')\n    return encrypted\n}\n\nconst decrypt = async text => {\n    let decipher = crypto.createDecipher('sha256', credentials.cookieSecret)\n    let dec = decipher.update(text,'hex','utf8')\n    dec += decipher.final('utf8');\n    return dec;\n}\n\nexport const All = async (req, res) => {\n    let query = {\n            netflix: false,\n            rightnow: false,\n            age:{\n                min:18,\n                max: 77\n            },\n            popularity: {\n                min: 0,\n                max: 100\n            },\n            geocode: {\n                lat: 0,\n                lng: 0\n            },\n            tags: [],\n            custom: ''\n        },\n        regexHashtag = /#([a-zA-Z0-9-]*)+/g,\n        regexNetflix = /netflix/i,\n        regexRightNow = /rightnow/i,\n        regexAge = /age-from=([0-9]{1,2}).*age-to=([0-9]{1,2})/i, //min = group1, max = group2\n        regexAgeMin = /age-from=[0-9]{1,2}/i,\n        regexAgeMax = /age-to=[0-9]{1,2}/i,\n        regexPopularity = /popularity-from=([0-9]{1,2}).*popularity-to=([0-9]{1,3})/i, //min = group1, max = group2\n        regexPopularityMin = /popularity-from=[0-9]{1,2}/i,\n        regexPopularityMax = /popularity-to=[0-9]{1,3}/i,\n        regexGeocode = /around-lat=(-?[0-9]{1,2}\\.?[0-9]{0,16}).*around-lng=(-?[0-9]{1,2}\\.?[0-9]{0,16})/i, //lat = group1, lng = group2\n        regexGeocodeLat = /around-lat=-?[0-9]{1,2}\\.?[0-9]{0,16}/i,\n        regexGeocodeLng = /around-lng=-?[0-9]{1,2}\\.?[0-9]{0,16}/i,\n\n        queryStr = req.query.query || ''\n\n    query.netflix = regexNetflix.test(queryStr)\n    query.rightnow = regexRightNow.test(queryStr)\n\n    const age = regexAge.exec(queryStr)\n\n    if (age) {\n        query.age.min = age[1]\n        query.age.max = age[2]\n    }\n\n    const popularity = regexPopularity.exec(queryStr)\n\n    if (popularity) {\n        query.popularity.min = popularity[1]\n        query.popularity.max = popularity[2]\n    }\n\n    const geocode = regexGeocode.exec(queryStr)\n\n    if (geocode) {\n        query.geocode.lat = geocode[1]\n        query.geocode.lng = geocode[2]\n    }\n\n    let i = 0,\n        temp = []\n    while ((temp = regexHashtag.exec(queryStr)) !== null) {\n        query.tags[i] = temp[1]\n        i++\n    }\n    query.custom = queryStr.replace(regexGeocodeLng, '')\n        .replace(regexGeocodeLat, '')\n        .replace(regexPopularityMax, '')\n        .replace(regexPopularityMin, '')\n        .replace(regexAgeMax, '')\n        .replace(regexAgeMin, '')\n        .replace(regexRightNow, '')\n        .replace(regexNetflix, '')\n        .replace(regexHashtag, '')\n        .replace(/ (?: *)/, ' ')\n        .split(' ')\n        .filter(e => e !== '')\n\n    const db = await dbl.connect()\n    try {\n        const results = await db.collection('users').find({})\n        try {\n            console.log('sending...')\n            res.send({users: await results.toArray()})\n        } catch (err) {\n            console.error(err)\n        }\n    } finally {\n        db.close()\n    }\n}\n\nexport const One = async (req, res) => {\n    console.log(\"Let's find that user\")\n    const login = req.user.username\n    let db = await dbl.connect()\n    try {\n        let user = await db.collection('users').findOne({login, active: true}, {password: false, token: false, fingerprint: false})\n        if (user) {\n            res.send({success: true, data: user})\n        } else {\n            res.send({success: false})\n        }\n    } catch(err) {\n        console.error(err)\n    } finally{\n        db.close()\n    }\n}\n\nexport const me = async (req,res) => {\n    res.send({login: req.user.username})\n}\n"]}