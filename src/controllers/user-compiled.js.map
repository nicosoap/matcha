{"version":3,"sources":["user.js"],"names":[],"mappings":"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","file":"user-compiled.js","sourcesContent":["// ************************************************************************** //\n//                                                                            //\n//                                                        :::      ::::::::   //\n//   user.js                                            :+:      :+:    :+:   //\n//                                                    +:+ +:+         +:+     //\n//   By: opichou <marvin@42.fr>                     +#+  +:+       +#+        //\n//                                                +#+#+#+#+#+   +#+           //\n//   Created: 2016/09/19 18:27:53 by opichou           #+#    #+#             //\n//   Updated: 2016/09/29 18:27:53 by opichou          ###   ########.fr       //\n//                                                                            //\n// ************************************************************************** //\n\nimport fs from 'fs'\nimport session from 'express-session'\nimport bcrypt from 'bcrypt'\nimport * as dbl from \"./dbConnect\"\nimport credentials from '../credentials'\nimport mongodb from 'mongodb';\nimport jwt from 'jsonwebtoken'\nimport nodemailer from 'nodemailer'\nimport ERROR from './errno_code'\nimport match from '../model/match'\n\nlet saltRounds = 10\n\nlet transporter = nodemailer.createTransport('smtps://apimatcha@gmail.com:apiMatcha1212@smtp.gmail.com')\n\n\nfunction now(){\n    const currentdate = new Date();\n    return currentdate.getDay() + \"/\"+currentdate.getMonth()\n    + \"/\" + currentdate.getFullYear() + \" @ \"\n    + currentdate.getHours() + \":\"\n    + currentdate.getMinutes() + \":\" + currentdate.getSeconds()\n}\n\nasync function genToken (user){\n    let myToken = await jwt.sign({username: user.login}, credentials.jwtSecret)\n    const db = await dbl.connect()\n    try {\n        const update = await db.collection('users').updateOne({login: user.login},{$set: {token: myToken}})\n        if (update.modifiedCount == 1){\n            user.token = myToken\n\n            console.log(user.login + \" connected: \"+ now())\n            return user\n        } else {\n            console.error(ERROR.TOKEN_ERROR + user.login)\n            user.success = false\n            user.message = ERROR.TOKEN_ERROR\n            return user;\n        }\n    } catch (err) {\n        console.error(err)\n        user.success = false\n        user.message = ERROR.TOKEN_ERROR\n        return user\n    } finally {\n        db.close();\n    }\n}\n\nasync function addFingerprint(user, fingerprint){\n    let db = await dbl.connect()\n    try {\n        db.collection('users').updateOne({login: user.login}, {$push: {fingerprint: fingerprint}})\n        user.fingerprint = fingerprint\n        return user\n    } catch (err) {\n        console.error(err);\n    }\n}\n\nfunction contains(a, obj) {\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === obj) {\n            return true;\n        }\n    }\n    return false;\n}\n\nasync function basicAuth(login, password, fingerprint, callback){\n    let db = await dbl.connect();\n    try {\n        let user = await db.collection('users').findOne({$or: [{login: login, active: true}, {email: login, active: true}]});\n        try {\n            db.close()\n            if (!user) {\n                callback({success: false, message: ERROR.AUTH_ERROR}, {\n                    auth: {\n                        success: false,\n                        message: ERROR.AUTH_ERROR\n                    }\n                });\n            } else {\n                bcrypt.compare(password, user.password, async (err, res) => {\n                    if (res) {\n                        user = await genToken(user);\n                        console.log(\"Token received\")\n                        if (user.fingerprint && contains(user.fingerprint, fingerprint)) {\n                            const ret = {\n                                auth: {\n                                    method: \"basic\",\n                                    success: true,\n                                    fingerprint: fingerprint,\n                                    token: user.token,\n                                    message: ERROR.LOGIN_SUCCESS_INFO\n                                }\n                            };\n                            callback(err, ret);\n                        } else {\n                            console.log(\"New fingerprint will be added to user profile\")\n                            user = addFingerprint(user, fingerprint)\n                            const ret = {\n                                auth: {\n                                    method: \"basic\",\n                                    success: true,\n                                    fingerprint: fingerprint,\n                                    token: user.token,\n                                    message: ERROR.LOGIN_SUCCESS_INFO\n                                }\n                            };\n                            callback(err, ret)\n                        }\n                    } else {\n                        console.log(\"wrong password\");\n                        const ret = {\n                            auth: {\n                                method: \"basic\",\n                                success: false,\n                                fingerprint: fingerprint,\n                                message: ERROR.AUTH_PASSWORD_ERROR\n                            }\n                        };\n                        callback(err, ret);\n                    }\n                });\n            }\n        }\n        catch (err) {\n            callback(err, false);\n        }\n    } catch(err) {\n        console.error(err);\n    }\n}\n\nasync function tokenAuth(token, fingerprint, callback){\n    let db = await dbl.connect();\n    let login = jwt.verify(token, credentials.jwtSecret).username\n    console.log(\"token auth for user: \"+login)\n    try {\n        let user = await db.collection('users').findOne({login: login, active : true});\n        if (!user) {\n            const ret = {\n                auth:{\n                    method: \"token\",\n                    success: false,\n                    fingerprint: fingerprint,\n                    message: ERROR.AUTH_ERROR}};\n            callback(true, ret);\n        } else if (user.fingerprint && contains(user.fingerprint, fingerprint)){\n            const ret = {\n                auth:{\n                    method: \"token\",\n                    success: true,\n                    fingerprint: fingerprint,\n                    message: ERROR.LOGIN_SUCCESS_INFO}};\n            callback(false, ret);\n        } else {\n            const ret = {\n                auth:{\n                    method: \"token\",\n                    success: true,\n                    fingerprint: false,\n                    message: ERROR.AUTH_DEVICE_ERROR}};\n            callback(true, ret);\n        }\n    }\n    catch (err){\n        const ret = {\n            auth:{\n                method: \"token\",\n                success: false,\n                fingerprint: fingerprint,\n                message: ERROR.AUTH_ERROR}};\n        callback(err, ret);\n    } finally {\n        db.close();\n    }\n}\n\nexport async function userLogin(req, res) {\n    let token = req.headers.authorization.match(/^Bearer (.*)$/)[1]\n    await authenticate(req.body.login, req.body.password, token, req.body.fingerprint, (err, ret) => {\n        if (err || ret.auth.fingerprint == false) {\n            console.error(err);\n            res.setHeader('Content-Type', 'application/json');\n            res.send(JSON.stringify(ret));\n        } else {\n            res.setHeader('Content-Type', 'application/json');\n            res.send(JSON.stringify(ret));\n        }\n    });\n}\n\nasync function authenticate(login, password, token, fingerprint, callback){\n    //This method authenticates user using basic strategy (username and password) or token based strategy.\n    //The first strategy uses Bcrypt to hash and salt the password.\n    //The latter uses JWT to validate the token.\n    //In any case, if a token doesn't exist, one is generated upon authentication success.\n    //After authenticating, if the device fingerprint isn't recognized, user will be required to confirm his identity\n    // using email.\n    //This function fires a callback when succeeding, this callback takes two arguments: err: boolean and ret: object\n    // containing every info about the authentication and its eventual success, if such, user info and details about\n    // device fingerprint status.\n\n    console.log(\"Connection attempt from: \" + login + ' (token: ' + token + ')');\n    if (token && fingerprint) {\n        tokenAuth(token, fingerprint, callback);\n    } else if (login && password && fingerprint) {\n        basicAuth(login, password,fingerprint, callback);\n    }else {\n        callback({message: ERROR.AUTH_ERROR},\n            {auth:{success: false, message: ERROR.AUTH_ERROR}});\n    }\n}\n\nexport async function checkLogin(req, res, next){\n    try {\n        let test = await checkLoginHlp(req.params.login);\n        res.setHeader('Content-Type', 'application/json');\n        res.send(JSON.stringify(test));\n    } catch(err) { next(err)}\n}\n\nasync function checkLoginHlp(login){\n    let db = await dbl.connect();\n    try {\n        const collection = db.collection('users');\n        let userCount = (await collection.find({\n            login: login\n        }).limit(1).count());\n        if (userCount == 0 && !(/([ ])/.exec(login))) {\n            console.log(\"Login \" + login + \" is valid\")\n            return {valid: true, message: \"Login \" + login + \" is available\", login: login};\n        } else if((/([ ])/.exec(login))){\n            console.log(\"Login \" + login + \" is not valid\")\n            return {valid: false, message: \"Login \" + login + \" contains whitespace\", login: login};\n        } else {\n            console.log(\"Login \" + login + \" is not valid\")\n            return {valid: false, message: \"Login \" + login + \" isn't available\", login: login};\n        }\n    } finally {\n        db.close();\n    }\n    //this method checks if Login already exists in database\n}\n\nasync function checkEmailHlp(email){\n    let db = await dbl.connect();\n    try {\n        let collection = db.collection('users');\n        console.log(collection);\n        let userCount = (await collection.find({\n            email: email\n        }).limit(1).count());\n        if (userCount == 0 && (email.match(/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/ig))) {\n            console.log(\"Email \" + email + \" is valid\")\n            return {valid: true, message: \"Email \" + email + \" is available\",email: email};\n        } else if(userCount == 0){\n            console.log(\"Email \" + email + \" is not valid\")\n            return {valid: false, error: 1, message: \"Email \" + email + \" is incorrect\",email: email};\n        } else {\n            console.log(\"Email \" + email + \" is not valid\")\n            return {valid: false, error: 2, message: \"A profile already exists for \" + email,email: email};\n        }\n    } finally {\n        db.close();\n    }\n    //this method checks if Email already exists in database\n}\n\nexport async function checkEmail(req, res){\n    try {\n        let test = await checkEmailHlp(req.params.email);\n        res.setHeader('Content-Type', 'application/json');\n        res.send(JSON.stringify(test));\n    } catch(err) { console.error(err)}\n}\n\nasync function checkPass(pass1, pass2){\n    if ((pass1 === pass2) &&\n        (pass1.match(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,48}$/))){\n        console.log(\"Password \" + pass1 + \" is valid\")\n        let password = await bcrypt.hashSync(pass1, saltRounds);\n        return ({valid: true, message: \"Valid password\", password: password});\n    } else {\n        console.log(\"Password \" + pass1 + \" is not valid\")\n        return({valid: false, message: ERROR.PASSWORD_FORMAT_ERROR});\n    }\n}\n\nasync function changePasswordHlp(token, password){\n    let returnValue = null;\n    await jwt.verify(token, credentials.jwtSecret, async function(err, ret){\n        console.log(err.message);\n        if (err){\n            returnValue = ({ success: false, message: 'token is corrupted' });\n        } else {\n            let password2 = await bcrypt.hashSync(password, saltRounds);\n            const email = ret.email;\n            const db = await dbl.connect();\n            let update = await db.collection('users').updateOne({email: email}, {$set: {password: password2}});\n            try {\n                if (update.modifiedCount == 1){\n                    returnValue =({success: true, message: \"Password updated successfully\"});\n                } else {\n                    returnValue =({success: false, message: \"An error happened while updating the password\"});\n                }\n            } catch (err) {\n                returnValue =({success: false, message: \"Database error\"});\n            } finally {\n                db.close();\n            }\n        }\n    });\n    return (returnValue);\n}\n\nexport async function changePassword(req, res) {\n    let token = req.body.token;\n    if (req.body.password === req.body.password2){\n        const password = req.body.password;\n        let response = await changePasswordHlp(token, password);\n        console.log(response);\n        try {\n            console.log(response);\n            res.setHeader('Content-Type', 'application/json');\n            res.send(response);\n        } catch (err) {\n            console.log(err);\n            console.error(err);\n            res.setHeader('Content-Type', 'application/json');\n            res.send(JSON.stringify(response));\n        }\n    }else {\n        res.setHeader('Content-Type', 'application/json');\n        res.send({success: false, message: \"Passwords didn't match\"});\n    }\n}\n\nasync function requireNewPassword(email){\n    //this methods sends an email with a temporary link for the user to create a new password\n    let myToken = jwt.sign({email: email}, credentials.jwtSecret, {expiresIn: 900});\n    const db = await dbl.connect();\n    const user = await db.collection('users').findOne({email: email});\n    try {\n        if (!user || !user.firstName ) {\n            return ({success: \"false\", message: \"User wasn't found\"});\n        } else {\n            let mailOptions = {\n                from: '\"liveoption\" <customer-success@liveoption.io>', // sender address\n                to: user.email, // list of receivers\n                subject: 'Password reset requested on liveoption',\n                html: '<b>Hello,</b></br><p>A password recovery procedure has been requested ' +\n                'in your name on liveoption.io. If you requested a new password, please' +\n                ' click on the following link to proceed.</p>' +\n                '<a href=\"http://www.liveoption.io/change_password?token=' + myToken + '\">Change my password now</a>' +\n                '<p>If you didn\\'t request a password reset, please disregard this email</p>' // html body\n            };\n            return await transporter.sendMail(mailOptions);\n        }\n    }catch (err) {\n        console.log(err);\n    } finally {\n        db.close();\n    }\n}\n\nexport async function retrievePassword(req, res){\n    let email = req.body.email;\n    let response = await requireNewPassword(email, res);\n    try {\n        console.log(response);\n        res.setHeader('Content-Type', 'application/json');\n        res.send(response);\n        console.log(response);\n    } catch (err) {\n        console.error(err);\n    }\n}\n\nexport async function Delete(req, res){\n    login = req.body.login;\n    password = req.body.password;\n    fingerprint = req.body.fingerprint;\n    let returnValue = null;\n    //this methods allow deletion of a user account after validating password\n    await authenticate(login, password, '', fingerprint, async (err, ret) => {\n        //remove from database and callback to feedback user in the UI\n        if (ret.auth.success){\n            const db = await dbl.connect();\n            const status = await db.collection('users').updateOne({login: \"login\"}, {$set: {active: false}});\n            try{\n                returnValue = status;\n            } catch(err) {\n                console.error(err);\n                returnValue = {success: false, state: \"error\", message: ERROR.DELETE_ERROR};\n            }finally {\n                db.close();\n            }\n\n        }else{\n            retrunValue = {success: false, state: \"error\", message: ERROR.DELETE_ERROR};\n        }\n    });\n    res.setHeader('Content-Type', 'application/json');\n    res.send(JSON.stringify(returnValue));\n}\n\nexport async function renderForm(req, res){\n    let db = await dbl.connect()\n    let response = await db.collection('profileItems').find()\n    try {\n        res.send(response)\n    } finally {\n        db.close()\n    }\n}\n\nexport async function create(req, res){\n    let user = {},\n        errors = [],\n        emailProp = await checkEmailHlp(req.body.email),\n        loginProp = await checkLoginHlp(req.body.login),\n        passwordProp = await checkPass(req.body.password, req.body.password2);\n\n    if (emailProp.valid) {user.email = emailProp.email} else errors.push(emailProp.message) && console.log(\"email error logged\");\n    if (loginProp.valid) {user.login = loginProp.login} else errors.push(loginProp.message) && console.log(\"login error logged\");\n    if (passwordProp.valid) {user.password = passwordProp.password} else errors.push(passwordProp.message) && console.log(\"password error logged\");\n    if (errors.length == 0) {\n        let db = await dbl.connect()\n        await db.collection('users').insertOne(user);\n        try {\n            console.log(\"success\")\n        } finally {\n            db.close();\n        }\n        await validateAccount(email);\n        res.send({success: true, message: \"User created, please check your emails\"});\n    } else {\n        res.send({success: false, message: \"Your account couldn't be created\", errors: errors});\n    }\n} //this method adds a new user to the database\n\nexport async function reactivate(req, res){\n    let login = req.body.login,\n        password = req.body.password,\n        db = await dbl.connect();\n    try {\n\n        const user = await db.collection('users').findOneAndUpdate({login: login, password: password, active: false}, {$set: {active: true}})\n        console.log(user)\n        if (user.nModified != 1) {\n            console.log(\"error\")\n            res.send({success: false, message: ERROR.REACTIVATION_ERROR})\n        }else{\n            let myToken = jwt.sign({email: user.email}, credentials.jwtSecret, {expiresIn: 9000}),\n                mailOptions = {\n                    from: '\"liveoption\" <customer-success@liveoption.io>', // sender address\n                    to: user.email, // list of receivers\n                    subject: 'Your account has been reactivated',\n                    html: '<b>Hello,</b></br><p>Your liveoption account has just been reactivated.' +\n                    'If you did not request the reactivation of your liveoption account, <a href=\"'+ req.get('host') +'/\">please click here.</a></p>'+\n                    '<p>Thank you,</p><p>See you soon !</p>'\n                }; // html body\n            res.send(await transporter.sendMail(mailOptions))\n        }\n    } finally {\n        db.close()\n    }\n}//this method reactivates a previously desactivated account\n\nasync function validateAccount(email){\n    let myToken = jwt.sign({email: email}, credentials.jwtSecret, {expiresIn: 900});\n    let mailOptions = {\n        from: '\"liveoption\" <customer-success@liveoption.io>', // sender address\n        to: email, // list of receivers\n        subject: 'Pleasee verify your liveoption account',\n        html: '<b>Hello,</b></br><p>You just created a liveoption account. Please click the following link within the next 15mins. to verify your email address.</p>' +\n        '<a href=\"http://www.liveoption.io/account/validate?token=' + myToken + '\">Validate account now</a>' +\n        '<p>Thank you for registering liveoption,</p><p>See you soon !</p>' // html body\n    };\n    return await transporter.sendMail(mailOptions);\n}\n\nexport async function isVerified(res, req){\n    //this method makes sure the user has authorized his account via email\n    let email = req.user.email;\n    let db = await dbl.connect();\n    try{\n        db.collection('users').updateOne({email: email}, {$set: {active: true}});\n    } finally {\n        db.close();\n    }\n    res.json({success: true, message: ERROR.ACCOUNT_VALIDATED_INFO})\n}\n\nexport async function updateProfile(req, res){\n    let db = await dbl.connect()\n    try {\n        let payload = req.body\n        let login = req.user.username\n        addTag(payload.tags)\n        delete payload.tags\n        await db.collection('users').updateOne({login: login}, {$set: payload})\n        res.send({success: true, message:ERROR.PROFILE_UPDATED_INFO})\n    } finally {\n        db.close()\n    }\n}\n\nexport async function tags(req, res){\n    let db = await dbl.connect()\n    let response = await db.colletion('tags').find().sort({count: desc})\n    res.send({response})\n}\n\nexport async function addTag(tags){\n    if (await tags === ''){console.log({status: \"ok\", tagsCreated: 0})}\n    const db = await dbl.connect()\n    try{\n        let bulk = await db.collection('tags').initializeUnorderedBulkOp()\n        await req.body.tags.filter((n) => n != '').forEach(async(n) => {\n            bulk.find({label: n}).upsert().updateOne({$inc: {count: 1}})\n        })\n        const result = await bulk.execute({w:1})\n        console.error(result)\n    } finally {\n        db.close()\n    }\n}\n\nexport async function viewAll(res, req){res.send({message: \"OK\"})}"]}