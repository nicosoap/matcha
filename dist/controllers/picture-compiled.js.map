{"version":3,"sources":["picture.js"],"names":[],"mappings":"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","file":"picture-compiled.js","sourcesContent":["// ************************************************************************** //\n//                                                                            //\n//                                                        :::      ::::::::   //\n//   picture.js                                            :+:      :+:    :+:   //\n//                                                    +:+ +:+         +:+     //\n//   By: opichou <marvin@42.fr>                     +#+  +:+       +#+        //\n//                                                +#+#+#+#+#+   +#+           //\n//   Created: 2016/09/19 18:27:53 by opichou           #+#    #+#             //\n//   Updated: 2016/09/29 18:27:53 by opichou          ###   ########.fr       //\n//                                                                            //\n// ************************************************************************** //\n\nimport fs from 'fs';\nimport session from 'express-session';\nimport bcrypt from 'bcrypt';\nimport * as dbl from \"./dbConnect\";\nimport credentials from '../credentials';\nimport mongodb from 'mongodb';\nimport jwt from 'jsonwebtoken';\nimport nodemailer from 'nodemailer';\nimport ERROR from './errno_code';\nimport match from '../model/match';\n\nasync function registerPicture(login, filename, ext) {\n    let payload = { user: login, filename: filename, ext: ext, active: true, date: Date.now() };\n    console.log(payload);\n    let db = await dbl.connect();\n    try {\n        return await db.collection('pictures').insertOne(payload);\n    } finally {\n        db.close();\n    }\n}\n\nexport async function uploadPicture(req, res) {\n    console.log(req.file);\n    const mimes = [\"image/jpeg\", \"image/gif\", \"image/png\"];\n    let ext = req.file.originalname;\n    console.log(ext);\n    console.log(req.file.mimetype);\n    if (mimes.indexOf(req.file.mimetype) != -1) {\n        ext = ext.match(/.*(\\.gif|\\.png|\\.jpg|\\.jpeg)$/i)[1];\n        console.log(ext);\n        const result = await registerPicture(req.user.username, req.file.filename, ext);\n        console.log(result);\n        if (result.insertedCount === 1) {\n            res.send({ success: true, message: ERROR.PICTURE_UPLOAD_SUCCESS });\n        } else {\n            res.send({ success: false, message: ERROR.PICTURE_REGISTER_ERROR });\n        }\n    } else {\n        res.send({ success: false, message: ERROR.PICTURE_UPLOAD_ERROR });\n    }\n}\n\nexport async function deleteOne(req, res) {\n    let login = req.user.username;\n    let filename = req.body.filename;\n    let db = await dbl.connect();\n    try {\n        return await db.collection('pictures').updateOne({ login: login, filename: filename, active: true }, { $set: { active: false } });\n    } finally {\n        db.close();\n    }\n}\n\nexport async function setAsDefault(req, res) {\n    let login = req.user.username,\n        filename = req.body.filename,\n        db = await dbl.connect();\n    try {\n        db.collection('users').updateOne({ login: login }, { $set: { defaultPicture: filename } });\n    } catch (e) {\n        console.error(e);\n    } finally {\n        db.close();\n    }\n}"]}