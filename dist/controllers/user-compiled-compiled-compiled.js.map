{"version":3,"sources":["user-compiled-compiled.js"],"names":[],"mappings":"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","file":"user-compiled-compiled-compiled.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.userLogin = userLogin;\nexports.checkLogin = checkLogin;\nexports.checkEmail = checkEmail;\nexports.changePassword = changePassword;\nexports.retrievePassword = retrievePassword;\nexports.Delete = Delete;\nexports.renderForm = renderForm;\nexports.create = create;\nexports.reactivate = reactivate;\nexports.isVerified = isVerified;\nexports.updateProfile = updateProfile;\nexports.tags = tags;\nexports.addTag = addTag;\nexports.viewAll = viewAll;\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _expressSession = require('express-session');\n\nvar _expressSession2 = _interopRequireDefault(_expressSession);\n\nvar _bcrypt = require('bcrypt');\n\nvar _bcrypt2 = _interopRequireDefault(_bcrypt);\n\nvar _dbConnect = require('./dbConnect');\n\nvar dbl = _interopRequireWildcard(_dbConnect);\n\nvar _credentials = require('../credentials');\n\nvar _credentials2 = _interopRequireDefault(_credentials);\n\nvar _mongodb = require('mongodb');\n\nvar _mongodb2 = _interopRequireDefault(_mongodb);\n\nvar _jsonwebtoken = require('jsonwebtoken');\n\nvar _jsonwebtoken2 = _interopRequireDefault(_jsonwebtoken);\n\nvar _nodemailer = require('nodemailer');\n\nvar _nodemailer2 = _interopRequireDefault(_nodemailer);\n\nvar _errno_code = require('./errno_code');\n\nvar _errno_code2 = _interopRequireDefault(_errno_code);\n\nvar _match = require('../model/match');\n\nvar _match2 = _interopRequireDefault(_match);\n\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    } else {\n        var newObj = {};if (obj != null) {\n            for (var key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n        }newObj.default = obj;return newObj;\n    }\n}\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\n// ************************************************************************** //\n//                                                                            //\n//                                                        :::      ::::::::   //\n//   user.js                                            :+:      :+:    :+:   //\n//                                                    +:+ +:+         +:+     //\n//   By: opichou <marvin@42.fr>                     +#+  +:+       +#+        //\n//                                                +#+#+#+#+#+   +#+           //\n//   Created: 2016/09/19 18:27:53 by opichou           #+#    #+#             //\n//   Updated: 2016/09/29 18:27:53 by opichou          ###   ########.fr       //\n//                                                                            //\n// ************************************************************************** //\n\nvar saltRounds = 10;\n\nvar transporter = _nodemailer2.default.createTransport('smtps://apimatcha@gmail.com:apiMatcha1212@smtp.gmail.com');\n\nfunction now() {\n    var currentdate = new Date();\n    return currentdate.getDay() + \"/\" + currentdate.getMonth() + \"/\" + currentdate.getFullYear() + \" @ \" + currentdate.getHours() + \":\" + currentdate.getMinutes() + \":\" + currentdate.getSeconds();\n}\n\nasync function genToken(user) {\n    var myToken = await _jsonwebtoken2.default.sign({ username: user.login }, _credentials2.default.jwtSecret);\n    var db = await dbl.connect();\n    try {\n        var update = await db.collection('users').updateOne({ login: user.login }, { $set: { token: myToken } });\n        if (update.modifiedCount == 1) {\n            user.token = myToken;\n\n            console.log(user.login + \" connected: \" + now());\n            return user;\n        } else {\n            console.error(_errno_code2.default.TOKEN_ERROR + user.login);\n            user.success = false;\n            user.message = _errno_code2.default.TOKEN_ERROR;\n            return user;\n        }\n    } catch (err) {\n        console.error(err);\n        user.success = false;\n        user.message = _errno_code2.default.TOKEN_ERROR;\n        return user;\n    } finally {\n        db.close();\n    }\n}\n\nasync function addFingerprint(user, fingerprint) {\n    var db = await dbl.connect();\n    try {\n        db.collection('users').updateOne({ login: user.login }, { $push: { fingerprint: fingerprint } });\n        user.fingerprint = fingerprint;\n        return user;\n    } catch (err) {\n        console.error(err);\n    }\n}\n\nfunction contains(a, obj) {\n    for (var i = 0; i < a.length; i++) {\n        if (a[i] === obj) {\n            return true;\n        }\n    }\n    return false;\n}\n\nasync function basicAuth(login, password, fingerprint, callback) {\n    var db = await dbl.connect();\n    try {\n        await async function () {\n            var user = await db.collection('users').findOne({ $or: [{ login: login, active: true }, { email: login, active: true }] });\n            try {\n                db.close();\n                if (!user) {\n                    callback({ success: false, message: _errno_code2.default.AUTH_ERROR }, {\n                        auth: {\n                            success: false,\n                            message: _errno_code2.default.AUTH_ERROR\n                        }\n                    });\n                } else {\n                    _bcrypt2.default.compare(password, user.password, async function (err, res) {\n                        if (res) {\n                            user = await genToken(user);\n                            console.log(\"Token received\");\n                            if (user.fingerprint && contains(user.fingerprint, fingerprint)) {\n                                var ret = {\n                                    auth: {\n                                        method: \"basic\",\n                                        success: true,\n                                        fingerprint: fingerprint,\n                                        token: user.token,\n                                        message: _errno_code2.default.LOGIN_SUCCESS_INFO\n                                    }\n                                };\n                                callback(err, ret);\n                            } else {\n                                console.log(\"New fingerprint will be added to user profile\");\n                                user = addFingerprint(user, fingerprint);\n                                var _ret2 = {\n                                    auth: {\n                                        method: \"basic\",\n                                        success: true,\n                                        fingerprint: fingerprint,\n                                        token: user.token,\n                                        message: _errno_code2.default.LOGIN_SUCCESS_INFO\n                                    }\n                                };\n                                callback(err, _ret2);\n                            }\n                        } else {\n                            console.log(\"wrong password\");\n                            var _ret3 = {\n                                auth: {\n                                    method: \"basic\",\n                                    success: false,\n                                    fingerprint: fingerprint,\n                                    message: _errno_code2.default.AUTH_PASSWORD_ERROR\n                                }\n                            };\n                            callback(err, _ret3);\n                        }\n                    });\n                }\n            } catch (err) {\n                callback(err, false);\n            }\n        }();\n    } catch (err) {\n        console.error(err);\n    }\n}\n\nasync function tokenAuth(token, fingerprint, callback) {\n    var db = await dbl.connect();\n    var login = _jsonwebtoken2.default.verify(token, _credentials2.default.jwtSecret).username;\n    console.log(\"token auth for user: \" + login);\n    try {\n        var user = await db.collection('users').findOne({ login: login, active: true });\n        if (!user) {\n            var ret = {\n                auth: {\n                    method: \"token\",\n                    success: false,\n                    fingerprint: fingerprint,\n                    message: _errno_code2.default.AUTH_ERROR } };\n            callback(true, ret);\n        } else if (user.fingerprint && contains(user.fingerprint, fingerprint)) {\n            var _ret4 = {\n                auth: {\n                    method: \"token\",\n                    success: true,\n                    fingerprint: fingerprint,\n                    message: _errno_code2.default.LOGIN_SUCCESS_INFO } };\n            callback(false, _ret4);\n        } else {\n            var _ret5 = {\n                auth: {\n                    method: \"token\",\n                    success: true,\n                    fingerprint: false,\n                    message: _errno_code2.default.AUTH_DEVICE_ERROR } };\n            callback(true, _ret5);\n        }\n    } catch (err) {\n        var _ret6 = {\n            auth: {\n                method: \"token\",\n                success: false,\n                fingerprint: fingerprint,\n                message: _errno_code2.default.AUTH_ERROR } };\n        callback(err, _ret6);\n    } finally {\n        db.close();\n    }\n}\n\nasync function userLogin(req, res) {\n    var token = req.headers.authorization.match(/^Bearer (.*)$/)[1];\n    await authenticate(req.body.login, req.body.password, token, req.body.fingerprint, function (err, ret) {\n        if (err || ret.auth.fingerprint == false) {\n            console.error(err);\n            res.setHeader('Content-Type', 'application/json');\n            res.send(JSON.stringify(ret));\n        } else {\n            res.setHeader('Content-Type', 'application/json');\n            res.send(JSON.stringify(ret));\n        }\n    });\n}\n\nasync function authenticate(login, password, token, fingerprint, callback) {\n    //This method authenticates user using basic strategy (username and password) or token based strategy.\n    //The first strategy uses Bcrypt to hash and salt the password.\n    //The latter uses JWT to validate the token.\n    //In any case, if a token doesn't exist, one is generated upon authentication success.\n    //After authenticating, if the device fingerprint isn't recognized, user will be required to confirm his identity\n    // using email.\n    //This function fires a callback when succeeding, this callback takes two arguments: err: boolean and ret: object\n    // containing every info about the authentication and its eventual success, if such, user info and details about\n    // device fingerprint status.\n\n    console.log(\"Connection attempt from: \" + login + ' (token: ' + token + ')');\n    if (token && fingerprint) {\n        tokenAuth(token, fingerprint, callback);\n    } else if (login && password && fingerprint) {\n        basicAuth(login, password, fingerprint, callback);\n    } else {\n        callback({ message: _errno_code2.default.AUTH_ERROR }, { auth: { success: false, message: _errno_code2.default.AUTH_ERROR } });\n    }\n}\n\nasync function checkLogin(req, res, next) {\n    try {\n        var test = await checkLoginHlp(req.params.login);\n        res.setHeader('Content-Type', 'application/json');\n        res.send(JSON.stringify(test));\n    } catch (err) {\n        next(err);\n    }\n}\n\nasync function checkLoginHlp(login) {\n    var db = await dbl.connect();\n    try {\n        var collection = db.collection('users');\n        var userCount = await collection.find({\n            login: login\n        }).limit(1).count();\n        if (userCount == 0 && !/([ ])/.exec(login)) {\n            console.log(\"Login \" + login + \" is valid\");\n            return { valid: true, message: \"Login \" + login + \" is available\", login: login };\n        } else if (/([ ])/.exec(login)) {\n            console.log(\"Login \" + login + \" is not valid\");\n            return { valid: false, message: \"Login \" + login + \" contains whitespace\", login: login };\n        } else {\n            console.log(\"Login \" + login + \" is not valid\");\n            return { valid: false, message: \"Login \" + login + \" isn't available\", login: login };\n        }\n    } finally {\n        db.close();\n    }\n    //this method checks if Login already exists in database\n}\n\nasync function checkEmailHlp(email) {\n    var db = await dbl.connect();\n    try {\n        var collection = db.collection('users');\n        console.log(collection);\n        var userCount = await collection.find({\n            email: email\n        }).limit(1).count();\n        if (userCount == 0 && email.match(/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/ig)) {\n            console.log(\"Email \" + email + \" is valid\");\n            return { valid: true, message: \"Email \" + email + \" is available\", email: email };\n        } else if (userCount == 0) {\n            console.log(\"Email \" + email + \" is not valid\");\n            return { valid: false, error: 1, message: \"Email \" + email + \" is incorrect\", email: email };\n        } else {\n            console.log(\"Email \" + email + \" is not valid\");\n            return { valid: false, error: 2, message: \"A profile already exists for \" + email, email: email };\n        }\n    } finally {\n        db.close();\n    }\n    //this method checks if Email already exists in database\n}\n\nasync function checkEmail(req, res) {\n    try {\n        var test = await checkEmailHlp(req.params.email);\n        res.setHeader('Content-Type', 'application/json');\n        res.send(JSON.stringify(test));\n    } catch (err) {\n        console.error(err);\n    }\n}\n\nasync function checkPass(pass1, pass2) {\n    if (pass1 === pass2 && pass1.match(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,48}$/)) {\n        console.log(\"Password \" + pass1 + \" is valid\");\n        var _password = await _bcrypt2.default.hashSync(pass1, saltRounds);\n        return { valid: true, message: \"Valid password\", password: _password };\n    } else {\n        console.log(\"Password \" + pass1 + \" is not valid\");\n        return { valid: false, message: _errno_code2.default.PASSWORD_FORMAT_ERROR };\n    }\n}\n\nasync function changePasswordHlp(token, password) {\n    var returnValue = null;\n    await _jsonwebtoken2.default.verify(token, _credentials2.default.jwtSecret, async function (err, ret) {\n        console.log(err.message);\n        if (err) {\n            returnValue = { success: false, message: 'token is corrupted' };\n        } else {\n            var password2 = await _bcrypt2.default.hashSync(password, saltRounds);\n            var _email = ret.email;\n            var db = await dbl.connect();\n            var update = await db.collection('users').updateOne({ email: _email }, { $set: { password: password2 } });\n            try {\n                if (update.modifiedCount == 1) {\n                    returnValue = { success: true, message: \"Password updated successfully\" };\n                } else {\n                    returnValue = { success: false, message: \"An error happened while updating the password\" };\n                }\n            } catch (err) {\n                returnValue = { success: false, message: \"Database error\" };\n            } finally {\n                db.close();\n            }\n        }\n    });\n    return returnValue;\n}\n\nasync function changePassword(req, res) {\n    var token = req.body.token;\n    if (req.body.password === req.body.password2) {\n        var _password2 = req.body.password;\n        var response = await changePasswordHlp(token, _password2);\n        console.log(response);\n        try {\n            console.log(response);\n            res.setHeader('Content-Type', 'application/json');\n            res.send(response);\n        } catch (err) {\n            console.log(err);\n            console.error(err);\n            res.setHeader('Content-Type', 'application/json');\n            res.send(JSON.stringify(response));\n        }\n    } else {\n        res.setHeader('Content-Type', 'application/json');\n        res.send({ success: false, message: \"Passwords didn't match\" });\n    }\n}\n\nasync function requireNewPassword(email) {\n    //this methods sends an email with a temporary link for the user to create a new password\n    var myToken = _jsonwebtoken2.default.sign({ email: email }, _credentials2.default.jwtSecret, { expiresIn: 900 });\n    var db = await dbl.connect();\n    var user = await db.collection('users').findOne({ email: email });\n    try {\n        if (!user || !user.firstName) {\n            return { success: \"false\", message: \"User wasn't found\" };\n        } else {\n            var mailOptions = {\n                from: '\"liveoption\" <customer-success@liveoption.io>', // sender address\n                to: user.email, // list of receivers\n                subject: 'Password reset requested on liveoption',\n                html: '<b>Hello,</b></br><p>A password recovery procedure has been requested ' + 'in your name on liveoption.io. If you requested a new password, please' + ' click on the following link to proceed.</p>' + '<a href=\"http://www.liveoption.io/change_password?token=' + myToken + '\">Change my password now</a>' + '<p>If you didn\\'t request a password reset, please disregard this email</p>' // html body\n            };\n            return await transporter.sendMail(mailOptions);\n        }\n    } catch (err) {\n        console.log(err);\n    } finally {\n        db.close();\n    }\n}\n\nasync function retrievePassword(req, res) {\n    var email = req.body.email;\n    var response = await requireNewPassword(email, res);\n    try {\n        console.log(response);\n        res.setHeader('Content-Type', 'application/json');\n        res.send(response);\n        console.log(response);\n    } catch (err) {\n        console.error(err);\n    }\n}\n\nasync function Delete(req, res) {\n    login = req.body.login;\n    password = req.body.password;\n    fingerprint = req.body.fingerprint;\n    var returnValue = null;\n    //this methods allow deletion of a user account after validating password\n    await authenticate(login, password, '', fingerprint, async function (err, ret) {\n        //remove from database and callback to feedback user in the UI\n        if (ret.auth.success) {\n            var db = await dbl.connect();\n            var status = await db.collection('users').updateOne({ login: \"login\" }, { $set: { active: false } });\n            try {\n                returnValue = status;\n            } catch (err) {\n                console.error(err);\n                returnValue = { success: false, state: \"error\", message: _errno_code2.default.DELETE_ERROR };\n            } finally {\n                db.close();\n            }\n        } else {\n            retrunValue = { success: false, state: \"error\", message: _errno_code2.default.DELETE_ERROR };\n        }\n    });\n    res.setHeader('Content-Type', 'application/json');\n    res.send(JSON.stringify(returnValue));\n}\n\nasync function renderForm(req, res) {\n    var db = await dbl.connect();\n    var response = await db.collection('profileItems').find();\n    try {\n        res.send(response);\n    } finally {\n        db.close();\n    }\n}\n\nasync function create(req, res) {\n    var user = {},\n        errors = [],\n        emailProp = await checkEmailHlp(req.body.email),\n        loginProp = await checkLoginHlp(req.body.login),\n        passwordProp = await checkPass(req.body.password, req.body.password2);\n\n    if (emailProp.valid) {\n        user.email = emailProp.email;\n    } else errors.push(emailProp.message) && console.log(\"email error logged\");\n    if (loginProp.valid) {\n        user.login = loginProp.login;\n    } else errors.push(loginProp.message) && console.log(\"login error logged\");\n    if (passwordProp.valid) {\n        user.password = passwordProp.password;\n    } else errors.push(passwordProp.message) && console.log(\"password error logged\");\n    if (errors.length == 0) {\n        var db = await dbl.connect();\n        await db.collection('users').insertOne(user);\n        try {\n            console.log(\"success\");\n        } finally {\n            db.close();\n        }\n        await validateAccount(email);\n        res.send({ success: true, message: \"User created, please check your emails\" });\n    } else {\n        res.send({ success: false, message: \"Your account couldn't be created\", errors: errors });\n    }\n} //this method adds a new user to the database\n\nasync function reactivate(req, res) {\n    var login = req.body.login,\n        password = req.body.password,\n        db = await dbl.connect();\n    try {\n\n        var user = await db.collection('users').findOneAndUpdate({ login: login, password: password, active: false }, { $set: { active: true } });\n        console.log(user);\n        if (user.nModified != 1) {\n            console.log(\"error\");\n            res.send({ success: false, message: _errno_code2.default.REACTIVATION_ERROR });\n        } else {\n            var myToken = _jsonwebtoken2.default.sign({ email: user.email }, _credentials2.default.jwtSecret, { expiresIn: 9000 }),\n                mailOptions = {\n                from: '\"liveoption\" <customer-success@liveoption.io>', // sender address\n                to: user.email, // list of receivers\n                subject: 'Your account has been reactivated',\n                html: '<b>Hello,</b></br><p>Your liveoption account has just been reactivated.' + 'If you did not request the reactivation of your liveoption account, <a href=\"' + req.get('host') + '/\">please click here.</a></p>' + '<p>Thank you,</p><p>See you soon !</p>'\n            }; // html body\n            res.send((await transporter.sendMail(mailOptions)));\n        }\n    } finally {\n        db.close();\n    }\n} //this method reactivates a previously desactivated account\n\nasync function validateAccount(email) {\n    var myToken = _jsonwebtoken2.default.sign({ email: email }, _credentials2.default.jwtSecret, { expiresIn: 900 });\n    var mailOptions = {\n        from: '\"liveoption\" <customer-success@liveoption.io>', // sender address\n        to: email, // list of receivers\n        subject: 'Pleasee verify your liveoption account',\n        html: '<b>Hello,</b></br><p>You just created a liveoption account. Please click the following link within the next 15mins. to verify your email address.</p>' + '<a href=\"http://www.liveoption.io/account/validate?token=' + myToken + '\">Validate account now</a>' + '<p>Thank you for registering liveoption,</p><p>See you soon !</p>' // html body\n    };\n    return await transporter.sendMail(mailOptions);\n}\n\nasync function isVerified(res, req) {\n    //this method makes sure the user has authorized his account via email\n    var email = req.user.email;\n    var db = await dbl.connect();\n    try {\n        db.collection('users').updateOne({ email: email }, { $set: { active: true } });\n    } finally {\n        db.close();\n    }\n    res.json({ success: true, message: _errno_code2.default.ACCOUNT_VALIDATED_INFO });\n}\n\nasync function updateProfile(req, res) {\n    var db = await dbl.connect();\n    try {\n        var payload = req.body;\n        var _login = req.user.username;\n        addTag(payload.tags);\n        delete payload.tags;\n        await db.collection('users').updateOne({ login: _login }, { $set: payload });\n        res.send({ success: true, message: _errno_code2.default.PROFILE_UPDATED_INFO });\n    } finally {\n        db.close();\n    }\n}\n\nasync function tags(req, res) {\n    var db = await dbl.connect();\n    var response = await db.colletion('tags').find().sort({ count: desc });\n    res.send({ response: response });\n}\n\nasync function addTag(tags) {\n    if ((await tags) === '') {\n        console.log({ status: \"ok\", tagsCreated: 0 });\n    }\n    var db = await dbl.connect();\n    try {\n        await async function () {\n            var bulk = await db.collection('tags').initializeUnorderedBulkOp();\n            await req.body.tags.filter(function (n) {\n                return n != '';\n            }).forEach(async function (n) {\n                bulk.find({ label: n }).upsert().updateOne({ $inc: { count: 1 } });\n            });\n            var result = await bulk.execute({ w: 1 });\n            console.error(result);\n        }();\n    } finally {\n        db.close();\n    }\n}\n\nasync function viewAll(res, req) {\n    res.send({ message: \"OK\" });\n}\n\n//# sourceMappingURL=user-compiled.js.map\n\n//# sourceMappingURL=user-compiled-compiled.js.map"]}